generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocumentStatus {
  draft
  issued
  partially_paid
  paid
  void
}

enum SalesOrderStatus {
  draft
  confirmed
  invoiced
}

enum BillStatus {
  draft
  approved
  partially_paid
  paid
  void
}

enum PaymentType {
  AR
  AP
}

enum PaymentMethod {
  bank_transfer
  cash
  card
  other
}

enum AccountType {
  asset
  liability
  equity
  income
  expense
}

enum JournalSource {
  manual
  sales_order
  invoice
  bill
  payment
  adjustment
}

model Organization {
  id            String          @id @default(cuid())
  name          String
  locale        String          @default("da-DK")
  baseCurrency  String          @default("DKK")
  users         UserOrganization[]
  customers     Customer[]
  vendors       Vendor[]
  products      Product[]
  taxRates      TaxRate[]
  salesOrders   SalesOrder[]
  invoices      Invoice[]
  bills         Bill[]
  payments      Payment[]
  accounts      Account[]
  journalEntries JournalEntry[]
  createdAt     DateTime        @default(now())
}

model User {
  id        String             @id @default(cuid())
  email     String             @unique
  passwordHash String
  name      String
  organizations UserOrganization[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model UserOrganization {
  userId  String
  orgId   String
  role    String  @default("owner")

  user User @relation(fields: [userId], references: [id])
  org  Organization @relation(fields: [orgId], references: [id])

  @@id([userId, orgId])
}

model Customer {
  id              String        @id @default(cuid())
  orgId           String
  name            String
  email           String?
  phone           String?
  billingAddress  Json?
  shippingAddress Json?
  vatNumber       String?
  notes           String?
  isArchived      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  salesOrders     SalesOrder[]
  invoices        Invoice[]

  organization Organization @relation(fields: [orgId], references: [id])
}

model Vendor {
  id              String        @id @default(cuid())
  orgId           String
  name            String
  email           String?
  phone           String?
  billingAddress  Json?
  shippingAddress Json?
  vatNumber       String?
  notes           String?
  isArchived      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  bills           Bill[]

  organization Organization @relation(fields: [orgId], references: [id])
}

model Product {
  id               String        @id @default(cuid())
  orgId            String
  sku              String?
  name             String
  description      String?
  unitPriceNet     Int
  incomeAccountId  String
  taxRateId        String?
  isService        Boolean       @default(true)
  isActive         Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  organization Organization @relation(fields: [orgId], references: [id])
  incomeAccount Account     @relation("ProductIncomeAccount", fields: [incomeAccountId], references: [id])
  taxRate       TaxRate?    @relation(fields: [taxRateId], references: [id])
  salesOrderLines SalesOrderLine[]
  invoiceLines    InvoiceLine[]

  @@unique([orgId, sku])
}

model TaxRate {
  id         String   @id @default(cuid())
  orgId      String
  name       String
  ratePercent Int
  isActive   Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  products   Product[]
  salesOrderLines SalesOrderLine[]
  invoiceLines    InvoiceLine[]
  billLines       BillLine[]

  organization Organization @relation(fields: [orgId], references: [id])
}

model SalesOrder {
  id         String           @id @default(cuid())
  orgId      String
  customerId String
  status     SalesOrderStatus @default(draft)
  orderNo    String
  issueDate  DateTime
  dueDate    DateTime?
  currency   String           @default("DKK")
  notes      String?
  totalsCache Json?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  lines      SalesOrderLine[]
  invoices   Invoice[]

  organization Organization @relation(fields: [orgId], references: [id])
  customer      Customer     @relation(fields: [customerId], references: [id])

  @@unique([orgId, orderNo])
}

model SalesOrderLine {
  id            String    @id @default(cuid())
  salesOrderId  String
  productId     String?
  description   String
  quantity      Int
  unitPriceNet  Int
  discountAmount Int?
  taxRatePercentSnapshot Int?
  accountIdSnapshot String?
  taxRateId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id])
  product    Product?   @relation(fields: [productId], references: [id])
  taxRate    TaxRate?   @relation(fields: [taxRateId], references: [id])
}

model Invoice {
  id             String        @id @default(cuid())
  orgId          String
  customerId     String
  salesOrderId   String?
  status         DocumentStatus @default(draft)
  invoiceNo      String
  issueDate      DateTime
  dueDate        DateTime?
  currency       String         @default("DKK")
  subtotal       Int            @default(0)
  taxTotal       Int            @default(0)
  total          Int            @default(0)
  balance        Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lines          InvoiceLine[]
  payments       InvoicePayment[]

  organization Organization @relation(fields: [orgId], references: [id])
  customer      Customer     @relation(fields: [customerId], references: [id])
  salesOrder    SalesOrder?  @relation(fields: [salesOrderId], references: [id])

  @@unique([orgId, invoiceNo])
}

model InvoiceLine {
  id            String    @id @default(cuid())
  invoiceId     String
  productId     String?
  description   String
  quantity      Int
  unitPriceNet  Int
  discountAmount Int?
  taxRatePercentSnapshot Int?
  accountIdSnapshot String?
  taxRateId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
  taxRate   TaxRate? @relation(fields: [taxRateId], references: [id])
}

model Bill {
  id          String    @id @default(cuid())
  orgId       String
  vendorId    String
  status      BillStatus @default(draft)
  billNo      String
  issueDate   DateTime
  dueDate     DateTime?
  currency    String     @default("DKK")
  subtotal    Int        @default(0)
  taxTotal    Int        @default(0)
  total       Int        @default(0)
  balance     Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  lines       BillLine[]
  payments    BillPayment[]

  organization Organization @relation(fields: [orgId], references: [id])
  vendor       Vendor       @relation(fields: [vendorId], references: [id])

  @@unique([orgId, billNo])
}

model BillLine {
  id            String   @id @default(cuid())
  billId        String
  description   String
  quantity      Int
  unitPriceNet  Int
  taxRatePercentSnapshot Int?
  accountId     String
  taxRateId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  bill     Bill     @relation(fields: [billId], references: [id])
  account  Account  @relation(fields: [accountId], references: [id])
  taxRate  TaxRate? @relation(fields: [taxRateId], references: [id])
}

model Payment {
  id          String        @id @default(cuid())
  orgId       String
  type        PaymentType
  method      PaymentMethod
  amount      Int
  date        DateTime
  reference   String?
  customerId  String?
  vendorId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  invoiceApplications InvoicePayment[]
  billApplications    BillPayment[]

  organization Organization @relation(fields: [orgId], references: [id])
  customer     Customer?    @relation(fields: [customerId], references: [id])
  vendor       Vendor?      @relation(fields: [vendorId], references: [id])
}

model InvoicePayment {
  invoiceId String
  paymentId String
  amount    Int

  invoice Invoice @relation(fields: [invoiceId], references: [id])
  payment Payment @relation(fields: [paymentId], references: [id])

  @@id([invoiceId, paymentId])
}

model BillPayment {
  billId    String
  paymentId String
  amount    Int

  bill    Bill    @relation(fields: [billId], references: [id])
  payment Payment @relation(fields: [paymentId], references: [id])

  @@id([billId, paymentId])
}

model Account {
  id        String   @id @default(cuid())
  orgId     String
  code      String
  name      String
  type      AccountType
  isSystem  Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Product[] @relation("ProductIncomeAccount")
  billLines BillLine[]
  journalLines JournalLine[]

  organization Organization @relation(fields: [orgId], references: [id])

  @@unique([orgId, code])
}

model JournalEntry {
  id        String       @id @default(cuid())
  orgId     String
  date      DateTime
  memo      String?
  source    JournalSource
  sourceId  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  lines     JournalLine[]

  organization Organization @relation(fields: [orgId], references: [id])
}

model JournalLine {
  id             String   @id @default(cuid())
  journalEntryId String
  accountId      String
  debit          Int      @default(0)
  credit         Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  journalEntry JournalEntry @relation(fields: [journalEntryId], references: [id])
  account      Account      @relation(fields: [accountId], references: [id])
}
